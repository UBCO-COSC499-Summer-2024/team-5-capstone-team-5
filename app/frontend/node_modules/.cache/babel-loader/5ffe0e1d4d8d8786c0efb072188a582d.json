{"ast":null,"code":"// src/utils/runtimeEnvironment.ts\nvar isDevelopmentEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"development\";\n  } catch (err) {}\n\n  return false;\n};\n\nvar isTestEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"test\";\n  } catch (err) {}\n\n  return false;\n};\n\nvar isProductionEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"production\";\n  } catch (err) {}\n\n  return false;\n}; // src/deprecated.ts\n\n\nvar displayedWarnings = /* @__PURE__ */new Set();\n\nvar deprecated = (fnName, warning, key) => {\n  const hideWarning = isTestEnvironment() || isProductionEnvironment();\n  const messageId = key != null ? key : fnName;\n\n  if (displayedWarnings.has(messageId) || hideWarning) {\n    return;\n  }\n\n  displayedWarnings.add(messageId);\n  console.warn(`Clerk - DEPRECATION WARNING: \"${fnName}\" is deprecated and will be removed in the next major release.\n${warning}`);\n};\n\nvar deprecatedProperty = function (cls, propName, warning) {\n  let isStatic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const target = isStatic ? cls : cls.prototype;\n  let value = target[propName];\n  Object.defineProperty(target, propName, {\n    get() {\n      deprecated(propName, warning, `${cls.name}:${propName}`);\n      return value;\n    },\n\n    set(v) {\n      value = v;\n    }\n\n  });\n};\n\nvar deprecatedObjectProperty = (obj, propName, warning, key) => {\n  let value = obj[propName];\n  Object.defineProperty(obj, propName, {\n    get() {\n      deprecated(propName, warning, key);\n      return value;\n    },\n\n    set(v) {\n      value = v;\n    }\n\n  });\n};\n\nexport { isDevelopmentEnvironment, isTestEnvironment, isProductionEnvironment, deprecated, deprecatedProperty, deprecatedObjectProperty };","map":{"version":3,"mappings":";AAAO,IAAMA,2BAA2B,MAAe;AACrD,MAAI;AACF,WAAOC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAhC;AAEF,GAHA,CAGA,OAASC,GAAT,EAAc,CAAC;;AAIf,SAAO,KAAP;AACF,CATO;;AAWA,IAAMC,oBAAoB,MAAe;AAC9C,MAAI;AACF,WAAOJ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAhC;AAEF,GAHA,CAGA,OAASC,GAAT,EAAc,CAAC;;AAGf,SAAO,KAAP;AACF,CARO;;AAUA,IAAME,0BAA0B,MAAe;AACpD,MAAI;AACF,WAAOL,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAhC;AAEF,GAHA,CAGA,OAASC,GAAT,EAAc,CAAC;;AAGf,SAAO,KAAP;AACF,CARO,C;;;ACAP,IAAMG,oBAAoB,mBAAIC,GAAJ,EAA1B;;AACO,IAAMC,aAAa,CAACC,MAAD,EAAiBC,OAAjB,EAAkCC,GAAlC,KAAyD;AACjF,QAAMC,cAAcR,uBAAuBC,yBAA3C;AACA,QAAMQ,YAAYF,oBAAOF,MAAzB;;AACA,MAAIH,kBAAkBQ,GAAlB,CAAsBD,SAAtB,KAAoCD,WAAxC,EAAqD;AACnD;AACF;;AACAN,oBAAkBS,GAAlB,CAAsBF,SAAtB;AAEAG,UAAQC,IAAR,CACE,iCAAiCR,MAAM;AAAA,EAAmEC,OAAO,EADnH;AAGF,CAXO;;AAoCA,IAAMQ,qBAAqB,UAACC,GAAD,EAAgBC,QAAhB,EAAkCV,OAAlC,EAA8E;AAAA,MAA3BW,QAA2B,uEAAhB,KAAgB;AAC9G,QAAMC,SAASD,WAAWF,GAAX,GAAiBA,IAAII,SAApC;AAEA,MAAIC,QAAQF,OAAOF,QAAP,CAAZ;AACAK,SAAOC,cAAP,CAAsBJ,MAAtB,EAA8BF,QAA9B,EAAwC;AACtCO,UAAM;AACJnB,iBAAWY,QAAX,EAAqBV,OAArB,EAA8B,GAAGS,IAAIS,IAAI,IAAIR,QAAQ,EAArD;AACA,aAAOI,KAAP;AACF,KAJsC;;AAKtCK,QAAIC,CAAJ,EAAgB;AACdN,cAAQM,CAAR;AACF;;AAPsC,GAAxC;AASF,CAbO;;AAyBA,IAAMC,2BAA2B,CACtCC,GADsC,EAEtCZ,QAFsC,EAGtCV,OAHsC,EAItCC,GAJsC,KAK7B;AACT,MAAIa,QAAQQ,IAAIZ,QAAJ,CAAZ;AACAK,SAAOC,cAAP,CAAsBM,GAAtB,EAA2BZ,QAA3B,EAAqC;AACnCO,UAAM;AACJnB,iBAAWY,QAAX,EAAqBV,OAArB,EAA8BC,GAA9B;AACA,aAAOa,KAAP;AACF,KAJmC;;AAKnCK,QAAIC,CAAJ,EAAgB;AACdN,cAAQM,CAAR;AACF;;AAPmC,GAArC;AASF,CAhBO","names":["isDevelopmentEnvironment","process","env","NODE_ENV","err","isTestEnvironment","isProductionEnvironment","displayedWarnings","Set","deprecated","fnName","warning","key","hideWarning","messageId","has","add","console","warn","deprecatedProperty","cls","propName","isStatic","target","prototype","value","Object","defineProperty","get","name","set","v","deprecatedObjectProperty","obj"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/utils/runtimeEnvironment.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/deprecated.ts"],"sourcesContent":["export const isDevelopmentEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'development';\n    // eslint-disable-next-line no-empty\n  } catch (err) {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n\n  return false;\n};\n\nexport const isTestEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'test';\n    // eslint-disable-next-line no-empty\n  } catch (err) {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n\nexport const isProductionEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'production';\n    // eslint-disable-next-line no-empty\n  } catch (err) {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n","import { isProductionEnvironment, isTestEnvironment } from './utils/runtimeEnvironment';\n/**\n * Mark class method / function as deprecated.\n *\n * A console WARNING will be displayed when class method / function is invoked.\n *\n * Examples\n * 1. Deprecate class method\n * class Example {\n *   getSomething = (arg1, arg2) => {\n *       deprecated('Example.getSomething', 'Use `getSomethingElse` instead.');\n *       return `getSomethingValue:${arg1 || '-'}:${arg2 || '-'}`;\n *   };\n * }\n *\n * 2. Deprecate function\n * const getSomething = () => {\n *   deprecated('getSomething', 'Use `getSomethingElse` instead.');\n *   return 'getSomethingValue';\n * };\n */\nconst displayedWarnings = new Set<string>();\nexport const deprecated = (fnName: string, warning: string, key?: string): void => {\n  const hideWarning = isTestEnvironment() || isProductionEnvironment();\n  const messageId = key ?? fnName;\n  if (displayedWarnings.has(messageId) || hideWarning) {\n    return;\n  }\n  displayedWarnings.add(messageId);\n\n  console.warn(\n    `Clerk - DEPRECATION WARNING: \"${fnName}\" is deprecated and will be removed in the next major release.\\n${warning}`,\n  );\n};\n/**\n * Mark class property as deprecated.\n *\n * A console WARNING will be displayed when class property is being accessed.\n *\n * 1. Deprecate class property\n * class Example {\n *   something: string;\n *   constructor(something: string) {\n *     this.something = something;\n *   }\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.');\n *\n * 2. Deprecate class static property\n * class Example {\n *   static something: string;\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.', true);\n */\ntype AnyClass = new (...args: any[]) => any;\n\nexport const deprecatedProperty = (cls: AnyClass, propName: string, warning: string, isStatic = false): void => {\n  const target = isStatic ? cls : cls.prototype;\n\n  let value = target[propName];\n  Object.defineProperty(target, propName, {\n    get() {\n      deprecated(propName, warning, `${cls.name}:${propName}`);\n      return value;\n    },\n    set(v: unknown) {\n      value = v;\n    },\n  });\n};\n\n/**\n * Mark object property as deprecated.\n *\n * A console WARNING will be displayed when object property is being accessed.\n *\n * 1. Deprecate object property\n * const obj = { something: 'aloha' };\n *\n * deprecatedObjectProperty(obj, 'something', 'Use `somethingElse` instead.');\n */\nexport const deprecatedObjectProperty = (\n  obj: Record<string, any>,\n  propName: string,\n  warning: string,\n  key?: string,\n): void => {\n  let value = obj[propName];\n  Object.defineProperty(obj, propName, {\n    get() {\n      deprecated(propName, warning, key);\n      return value;\n    },\n    set(v: unknown) {\n      value = v;\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}