{"ast":null,"code":"// src/underscore.ts\nvar toSentence = items => {\n  if (items.length == 0) {\n    return \"\";\n  }\n\n  if (items.length == 1) {\n    return items[0];\n  }\n\n  let sentence = items.slice(0, -1).join(\", \");\n  sentence += `, or ${items.slice(-1)}`;\n  return sentence;\n};\n\nvar IP_V4_ADDRESS_REGEX = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\nfunction isIPV4Address(str) {\n  return IP_V4_ADDRESS_REGEX.test(str || \"\");\n}\n\nfunction titleize(str) {\n  const s = str || \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nfunction snakeToCamel(str) {\n  return str ? str.replace(/([-_][a-z])/g, match => match.toUpperCase().replace(/-|_/, \"\")) : \"\";\n}\n\nfunction camelToSnake(str) {\n  return str ? str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`) : \"\";\n}\n\nvar createDeepObjectTransformer = transform => {\n  const deepTransform = obj => {\n    if (!obj) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(el => {\n        if (typeof el === \"object\" || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n\n        return el;\n      });\n    }\n\n    const copy = { ...obj\n    };\n    const keys = Object.keys(copy);\n\n    for (const oldName of keys) {\n      const newName = transform(oldName.toString());\n\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n\n      if (typeof copy[newName] === \"object\") {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n\n    return copy;\n  };\n\n  return deepTransform;\n};\n\nvar deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\nvar deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n\nfunction isTruthy(value) {\n  if (typeof value === `boolean`) return value;\n  if (value === void 0 || value === null) return false;\n\n  if (typeof value === `string`) {\n    if (value.toLowerCase() === `true`) return true;\n    if (value.toLowerCase() === `false`) return false;\n  }\n\n  const number = parseInt(value, 10);\n  if (isNaN(number)) return false;\n  if (number > 0) return true;\n  return false;\n}\n\nfunction getNonUndefinedValues(obj) {\n  return Object.entries(obj).reduce((acc, _ref) => {\n    let [key, value] = _ref;\n\n    if (value !== void 0) {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n}\n\nexport { toSentence, isIPV4Address, titleize, snakeToCamel, camelToSnake, deepCamelToSnake, deepSnakeToCamel, isTruthy, getNonUndefinedValues };","map":{"version":3,"mappings":"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","names":["toSentence","items","length","sentence","slice","join","IP_V4_ADDRESS_REGEX","isIPV4Address","str","test","titleize","s","charAt","toUpperCase","snakeToCamel","replace","match","camelToSnake","letter","toLowerCase","createDeepObjectTransformer","transform","deepTransform","obj","Array","isArray","map","el","copy","keys","Object","oldName","newName","toString","deepCamelToSnake","deepSnakeToCamel","isTruthy","value","number","parseInt","isNaN","getNonUndefinedValues","entries","reduce","acc","key"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/underscore.ts"],"sourcesContent":["/**\n * Converts an array of strings to a comma-separated sentence\n * @param items {Array<string>}\n * @returns {string} Returns a string with the items joined by a comma and the last item joined by \", or\"\n */\nexport const toSentence = (items: string[]): string => {\n  // TODO: Once Safari supports it, use Intl.ListFormat\n  if (items.length == 0) {\n    return '';\n  }\n  if (items.length == 1) {\n    return items[0];\n  }\n  let sentence = items.slice(0, -1).join(', ');\n  sentence += `, or ${items.slice(-1)}`;\n  return sentence;\n};\n\nconst IP_V4_ADDRESS_REGEX =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\nexport function isIPV4Address(str: string | undefined | null): boolean {\n  return IP_V4_ADDRESS_REGEX.test(str || '');\n}\n\nexport function titleize(str: string | undefined | null): string {\n  const s = str || '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function snakeToCamel(str: string | undefined): string {\n  return str ? str.replace(/([-_][a-z])/g, match => match.toUpperCase().replace(/-|_/, '')) : '';\n}\n\nexport function camelToSnake(str: string | undefined): string {\n  return str ? str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`) : '';\n}\n\nconst createDeepObjectTransformer = (transform: any) => {\n  const deepTransform = (obj: any): any => {\n    if (!obj) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(el => {\n        if (typeof el === 'object' || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n\n    const copy = { ...obj };\n    const keys = Object.keys(copy);\n    for (const oldName of keys) {\n      const newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === 'object') {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n\n  return deepTransform;\n};\n\n/**\n * Transforms camelCased objects/ arrays to snake_cased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\n\n/**\n * Transforms snake_cased objects/ arrays to camelCased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n\n/**\n * Returns true for `true`, true, positive numbers.\n * Returns false for `false`, false, 0, negative integers and anything else.\n */\nexport function isTruthy(value: unknown): boolean {\n  // Return if Boolean\n  if (typeof value === `boolean`) return value;\n\n  // Return false if null or undefined\n  if (value === undefined || value === null) return false;\n\n  // If the String is true or false\n  if (typeof value === `string`) {\n    if (value.toLowerCase() === `true`) return true;\n    if (value.toLowerCase() === `false`) return false;\n  }\n\n  // Now check if it's a number\n  const number = parseInt(value as string, 10);\n  if (isNaN(number)) return false;\n  if (number > 0) return true;\n\n  // Default to false\n  return false;\n}\n\nexport function getNonUndefinedValues<T extends object>(obj: T): Partial<T> {\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (value !== undefined) {\n      acc[key as keyof T] = value;\n    }\n    return acc;\n  }, {} as Partial<T>);\n}\n"]},"metadata":{},"sourceType":"module"}