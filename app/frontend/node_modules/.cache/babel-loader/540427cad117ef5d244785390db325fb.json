{"ast":null,"code":"// src/date.ts\nvar MILLISECONDS_IN_DAY = 864e5;\n\nfunction dateTo12HourTime(date) {\n  if (!date) {\n    return \"\";\n  }\n\n  return date.toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"numeric\",\n    hour12: true\n  });\n}\n\nfunction differenceInCalendarDays(a, b) {\n  let {\n    absolute = true\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!a || !b) {\n    return 0;\n  }\n\n  const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n  const diff = Math.floor((utcB - utcA) / MILLISECONDS_IN_DAY);\n  return absolute ? Math.abs(diff) : diff;\n}\n\nfunction normalizeDate(d) {\n  try {\n    return new Date(d || /* @__PURE__ */new Date());\n  } catch (e) {\n    return /* @__PURE__ */new Date();\n  }\n}\n\nfunction formatRelative(props) {\n  const {\n    date,\n    relativeTo\n  } = props;\n\n  if (!date || !relativeTo) {\n    return null;\n  }\n\n  const a = normalizeDate(date);\n  const b = normalizeDate(relativeTo);\n  const differenceInDays = differenceInCalendarDays(b, a, {\n    absolute: false\n  });\n\n  if (differenceInDays < -6) {\n    return {\n      relativeDateCase: \"other\",\n      date: a\n    };\n  }\n\n  if (differenceInDays < -1) {\n    return {\n      relativeDateCase: \"previous6Days\",\n      date: a\n    };\n  }\n\n  if (differenceInDays === -1) {\n    return {\n      relativeDateCase: \"lastDay\",\n      date: a\n    };\n  }\n\n  if (differenceInDays === 0) {\n    return {\n      relativeDateCase: \"sameDay\",\n      date: a\n    };\n  }\n\n  if (differenceInDays === 1) {\n    return {\n      relativeDateCase: \"nextDay\",\n      date: a\n    };\n  }\n\n  if (differenceInDays < 7) {\n    return {\n      relativeDateCase: \"next6Days\",\n      date: a\n    };\n  }\n\n  return {\n    relativeDateCase: \"other\",\n    date: a\n  };\n}\n\nfunction addYears(initialDate, yearsToAdd) {\n  const date = normalizeDate(initialDate);\n  date.setFullYear(date.getFullYear() + yearsToAdd);\n  return date;\n}\n\nexport { dateTo12HourTime, differenceInCalendarDays, normalizeDate, formatRelative, addYears };","map":{"version":3,"mappings":";AAAA,IAAMA,sBAAsB,KAA5B;;AAEO,SAASC,gBAAT,CAA0BC,IAA1B,EAA8C;AACnD,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,EAAP;AACF;;AACA,SAAOA,KAAKC,cAAL,CAAoB,OAApB,EAA6B;AAClCC,UAAM,SAD4B;AAElCC,YAAQ,SAF0B;AAGlCC,YAAQ;AAH0B,GAA7B,CAAP;AAKF;;AAEO,SAASC,wBAAT,CAAkCC,CAAlC,EAA2CC,CAA3C,EAAsF;AAAA,MAAlC;AAAEC,eAAW;AAAb,GAAkC,uEAAZ,EAAY;;AAC3F,MAAI,CAACF,CAAD,IAAM,CAACC,CAAX,EAAc;AACZ,WAAO,CAAP;AACF;;AACA,QAAME,OAAOC,KAAKC,GAAL,CAASL,EAAEM,WAAF,EAAT,EAA0BN,EAAEO,QAAF,EAA1B,EAAwCP,EAAEQ,OAAF,EAAxC,CAAb;AACA,QAAMC,OAAOL,KAAKC,GAAL,CAASJ,EAAEK,WAAF,EAAT,EAA0BL,EAAEM,QAAF,EAA1B,EAAwCN,EAAEO,OAAF,EAAxC,CAAb;AACA,QAAME,OAAOC,KAAKC,KAAL,CAAK,CAAOH,OAAON,IAAd,IAAsBX,mBAA3B,CAAb;AACA,SAAOU,WAAWS,KAAKE,GAAL,CAASH,IAAT,CAAX,GAA4BA,IAAnC;AACF;;AAEO,SAASI,aAAT,CAAuBC,CAAvB,EAAwD;AAC7D,MAAI;AACF,WAAO,IAAIX,IAAJ,CAASW,KAAK,mBAAIX,IAAJ,EAAd,CAAP;AACF,GAFA,CAEA,OAASY,CAAT,EAAY;AACV,WAAO,mBAAIZ,IAAJ,EAAP;AACF;AACF;;AAUO,SAASa,cAAT,CAAwBC,KAAxB,EAA6E;AAClF,QAAM;AAAExB,QAAF;AAAQyB;AAAR,MAAuBD,KAA7B;;AACA,MAAI,CAACxB,IAAD,IAAS,CAACyB,UAAd,EAA0B;AACxB,WAAO,IAAP;AACF;;AACA,QAAMnB,IAAIc,cAAcpB,IAAd,CAAV;AACA,QAAMO,IAAIa,cAAcK,UAAd,CAAV;AACA,QAAMC,mBAAmBrB,yBAAyBE,CAAzB,EAA4BD,CAA5B,EAA+B;AAAEE,cAAU;AAAZ,GAA/B,CAAzB;;AAEA,MAAIkB,mBAAmB,EAAvB,EAA2B;AACzB,WAAO;AAAEC,wBAAkB,OAApB;AAA6B3B,YAAMM;AAAnC,KAAP;AACF;;AACA,MAAIoB,mBAAmB,EAAvB,EAA2B;AACzB,WAAO;AAAEC,wBAAkB,eAApB;AAAqC3B,YAAMM;AAA3C,KAAP;AACF;;AACA,MAAIoB,qBAAqB,EAAzB,EAA6B;AAC3B,WAAO;AAAEC,wBAAkB,SAApB;AAA+B3B,YAAMM;AAArC,KAAP;AACF;;AACA,MAAIoB,qBAAqB,CAAzB,EAA4B;AAC1B,WAAO;AAAEC,wBAAkB,SAApB;AAA+B3B,YAAMM;AAArC,KAAP;AACF;;AACA,MAAIoB,qBAAqB,CAAzB,EAA4B;AAC1B,WAAO;AAAEC,wBAAkB,SAApB;AAA+B3B,YAAMM;AAArC,KAAP;AACF;;AACA,MAAIoB,mBAAmB,CAAvB,EAA0B;AACxB,WAAO;AAAEC,wBAAkB,WAApB;AAAiC3B,YAAMM;AAAvC,KAAP;AACF;;AACA,SAAO;AAAEqB,sBAAkB,OAApB;AAA6B3B,UAAMM;AAAnC,GAAP;AACF;;AAEO,SAASsB,QAAT,CAAkBC,WAAlB,EAAuDC,UAAvD,EAAiF;AACtF,QAAM9B,OAAOoB,cAAcS,WAAd,CAAb;AACA7B,OAAK+B,WAAL,CAAiB/B,KAAKY,WAAL,KAAqBkB,UAAtC;AACA,SAAO9B,IAAP;AACF","names":["MILLISECONDS_IN_DAY","dateTo12HourTime","date","toLocaleString","hour","minute","hour12","differenceInCalendarDays","a","b","absolute","utcA","Date","UTC","getFullYear","getMonth","getDate","utcB","diff","Math","floor","abs","normalizeDate","d","e","formatRelative","props","relativeTo","differenceInDays","relativeDateCase","addYears","initialDate","yearsToAdd","setFullYear"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/date.ts"],"sourcesContent":["const MILLISECONDS_IN_DAY = 86400000;\n\nexport function dateTo12HourTime(date: Date): string {\n  if (!date) {\n    return '';\n  }\n  return date.toLocaleString('en-US', {\n    hour: '2-digit',\n    minute: 'numeric',\n    hour12: true,\n  });\n}\n\nexport function differenceInCalendarDays(a: Date, b: Date, { absolute = true } = {}): number {\n  if (!a || !b) {\n    return 0;\n  }\n  const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n  const diff = Math.floor((utcB - utcA) / MILLISECONDS_IN_DAY);\n  return absolute ? Math.abs(diff) : diff;\n}\n\nexport function normalizeDate(d: Date | string | number): Date {\n  try {\n    return new Date(d || new Date());\n  } catch (e) {\n    return new Date();\n  }\n}\n\ntype DateFormatRelativeParams = {\n  date: Date | string | number;\n  relativeTo: Date | string | number;\n};\n\nexport type RelativeDateCase = 'previous6Days' | 'lastDay' | 'sameDay' | 'nextDay' | 'next6Days' | 'other';\ntype RelativeDateReturn = { relativeDateCase: RelativeDateCase; date: Date } | null;\n\nexport function formatRelative(props: DateFormatRelativeParams): RelativeDateReturn {\n  const { date, relativeTo } = props;\n  if (!date || !relativeTo) {\n    return null;\n  }\n  const a = normalizeDate(date);\n  const b = normalizeDate(relativeTo);\n  const differenceInDays = differenceInCalendarDays(b, a, { absolute: false });\n\n  if (differenceInDays < -6) {\n    return { relativeDateCase: 'other', date: a };\n  }\n  if (differenceInDays < -1) {\n    return { relativeDateCase: 'previous6Days', date: a };\n  }\n  if (differenceInDays === -1) {\n    return { relativeDateCase: 'lastDay', date: a };\n  }\n  if (differenceInDays === 0) {\n    return { relativeDateCase: 'sameDay', date: a };\n  }\n  if (differenceInDays === 1) {\n    return { relativeDateCase: 'nextDay', date: a };\n  }\n  if (differenceInDays < 7) {\n    return { relativeDateCase: 'next6Days', date: a };\n  }\n  return { relativeDateCase: 'other', date: a };\n}\n\nexport function addYears(initialDate: Date | number | string, yearsToAdd: number): Date {\n  const date = normalizeDate(initialDate);\n  date.setFullYear(date.getFullYear() + yearsToAdd);\n  return date;\n}\n"]},"metadata":{},"sourceType":"module"}