{"ast":null,"code":"import { eventMethodCalled } from \"../chunk-TUVJ3GI6.mjs\";\nimport { __export, __reExport } from \"../chunk-UVVCWSVF.mjs\"; // src/react/hooks/createContextAndHook.ts\n\nimport React from \"react\";\n\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return ctx.value;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n}; // src/react/contexts.tsx\n\n\nimport React2 from \"react\"; // src/react/clerk-swr.ts\n\nvar clerk_swr_exports = {};\n\n__export(clerk_swr_exports, {\n  SWRConfig: () => SWRConfig,\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n\n__reExport(clerk_swr_exports, swr_star);\n\nimport * as swr_star from \"swr\";\nimport { default as default2, SWRConfig } from \"swr\";\nimport { default as default3 } from \"swr/infinite\"; // src/react/contexts.tsx\n\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\n\nvar OrganizationProvider = _ref => {\n  let {\n    children,\n    organization,\n    swrConfig\n  } = _ref;\n  return /* @__PURE__ */React2.createElement(SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization\n      }\n    }\n  }, children));\n};\n\nfunction useAssertWrappedByClerkProvider(displayNameOrFn) {\n  const ctx = React2.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === \"function\") {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(`${displayNameOrFn} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`);\n  }\n} // src/react/hooks/usePagesOrInfinite.ts\n\n\nimport { useCallback, useMemo, useRef, useState } from \"react\";\n\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\nvar useWithSafeValues = (params, defaultValues) => {\n  var _a, _b, _c;\n\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : (_a = params == null ? void 0 : params.initialPage) != null ? _a : defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (_b = params == null ? void 0 : params.pageSize) != null ? _b : defaultValues.pageSize);\n  const newObj = {};\n\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (_c = params == null ? void 0 : params[key]) != null ? _c : defaultValues[key];\n  }\n\n  return { ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  };\n};\n\nvar cachingSWROptions = {\n  dedupingInterval: 1e3 * 60,\n  focusThrottleInterval: 1e3 * 60 * 2\n};\n\nvar usePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const [paginatedPage, setPaginatedPage] = useState((_a = params.initialPage) != null ? _a : 1);\n  const initialPageRef = useRef((_b = params.initialPage) != null ? _b : 1);\n  const pageSizeRef = useRef((_c = params.pageSize) != null ? _c : 10);\n  const enabled = (_d = config.enabled) != null ? _d : true;\n  const triggerInfinite = (_e = config.infinite) != null ? _e : false;\n  const keepPreviousData = (_f = config.keepPreviousData) != null ? _f : false;\n  const pagesCacheKey = { ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  };\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, {\n    keepPreviousData,\n    ...cachingSWROptions\n  });\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n\n    return { ...params,\n      ...cacheKeys,\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    };\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, cachingSWROptions);\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    var _a2, _b2;\n\n    if (triggerInfinite) {\n      return (_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData.map(a => a == null ? void 0 : a.data).flat()) != null ? _a2 : [];\n    }\n\n    return (_b2 = swrData == null ? void 0 : swrData.data) != null ? _b2 : [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    var _a2, _b2;\n\n    if (triggerInfinite) {\n      return ((_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData[(swrInfiniteData == null ? void 0 : swrInfiniteData.length) - 1]) == null ? void 0 : _a2.total_count) || 0;\n    }\n\n    return (_b2 = swrData == null ? void 0 : swrData.total_count) != null ? _b2 : 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (_g = triggerInfinite ? swrInfiniteError : swrError) != null ? _g : null;\n  const isError = !!error;\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n}; // src/react/hooks/useOrganization.tsx\n\n\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\n\nvar useOrganization = params => {\n  var _a;\n\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganization\");\n  const {\n    organization\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganization\"));\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const domains = usePagesOrInfinite({ ...domainParams\n  }, organization == null ? void 0 : organization.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const membershipRequests = usePagesOrInfinite({ ...membershipRequestParams\n  }, organization == null ? void 0 : organization.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const memberships = usePagesOrInfinite(membersParams || {}, organization == null ? void 0 : organization.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const invitations = usePagesOrInfinite({ ...invitationsParams\n  }, organization == null ? void 0 : organization.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations\n  };\n};\n\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(organizationMembership => organizationMembership.organization.id === activeOrganizationId);\n} // src/react/hooks/useOrganizationList.tsx\n\n\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\n\nvar useOrganizationList = params => {\n  var _a;\n\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganizationList\");\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganizationList\"));\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite(userMembershipsParams || {}, user == null ? void 0 : user.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user == null ? void 0 : user.id\n  });\n  const invitations = usePagesOrInfinite({ ...userInvitationsParams\n  }, user == null ? void 0 : user.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user == null ? void 0 : user.id\n  });\n  const suggestions = usePagesOrInfinite({ ...userSuggestionsParams\n  }, user == null ? void 0 : user.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user == null ? void 0 : user.id\n  });\n\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n}; // src/react/hooks/useSafeLayoutEffect.tsx\n\n\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect; // src/react/hooks/useSession.ts\n\nvar useSession = () => {\n  useAssertWrappedByClerkProvider(\"useSession\");\n  const session = useSessionContext();\n\n  if (session === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      session: void 0\n    };\n  }\n\n  if (session === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    session\n  };\n}; // src/react/hooks/useSessionList.ts\n\n\nvar useSessionList = () => {\n  useAssertWrappedByClerkProvider(\"useSessionList\");\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n\n  if (!client) {\n    return {\n      isLoaded: false,\n      sessions: void 0,\n      setActive: void 0\n    };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive\n  };\n}; // src/react/hooks/useUser.ts\n\n\nfunction useUser() {\n  useAssertWrappedByClerkProvider(\"useUser\");\n  const user = useUserContext();\n\n  if (user === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      user: void 0\n    };\n  }\n\n  if (user === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      user: null\n    };\n  }\n\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user\n  };\n} // src/react/hooks/useClerk.ts\n\n\nvar useClerk = () => {\n  useAssertWrappedByClerkProvider(\"useClerk\");\n  return useClerkInstanceContext();\n}; // ../../node_modules/dequal/dist/index.mjs\n\n\nvar has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n  for (key of iter.keys()) {\n    if (dequal(key, tar)) return key;\n  }\n}\n\nfunction dequal(foo, bar) {\n  var ctor, len, tmp;\n  if (foo === bar) return true;\n\n  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n    if (ctor === Date) return foo.getTime() === bar.getTime();\n    if (ctor === RegExp) return foo.toString() === bar.toString();\n\n    if (ctor === Array) {\n      if ((len = foo.length) === bar.length) {\n        while (len-- && dequal(foo[len], bar[len]));\n      }\n\n      return len === -1;\n    }\n\n    if (ctor === Set) {\n      if (foo.size !== bar.size) {\n        return false;\n      }\n\n      for (len of foo) {\n        tmp = len;\n\n        if (tmp && typeof tmp === \"object\") {\n          tmp = find(bar, tmp);\n          if (!tmp) return false;\n        }\n\n        if (!bar.has(tmp)) return false;\n      }\n\n      return true;\n    }\n\n    if (ctor === Map) {\n      if (foo.size !== bar.size) {\n        return false;\n      }\n\n      for (len of foo) {\n        tmp = len[0];\n\n        if (tmp && typeof tmp === \"object\") {\n          tmp = find(bar, tmp);\n          if (!tmp) return false;\n        }\n\n        if (!dequal(len[1], bar.get(tmp))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (ctor === ArrayBuffer) {\n      foo = new Uint8Array(foo);\n      bar = new Uint8Array(bar);\n    } else if (ctor === DataView) {\n      if ((len = foo.byteLength) === bar.byteLength) {\n        while (len-- && foo.getInt8(len) === bar.getInt8(len));\n      }\n\n      return len === -1;\n    }\n\n    if (ArrayBuffer.isView(foo)) {\n      if ((len = foo.byteLength) === bar.byteLength) {\n        while (len-- && foo[len] === bar[len]);\n      }\n\n      return len === -1;\n    }\n\n    if (!ctor || typeof foo === \"object\") {\n      len = 0;\n\n      for (ctor in foo) {\n        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n      }\n\n      return Object.keys(bar).length === len;\n    }\n  }\n\n  return foo !== foo && bar !== bar;\n} // src/react/hooks/useDeepEqualMemo.ts\n\n\nimport React4 from \"react\";\n\nvar useDeepEqualMemoize = value => {\n  const ref = React4.useRef(value);\n\n  if (!dequal(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return React4.useMemo(() => ref.current, [ref.current]);\n};\n\nvar useDeepEqualMemo = (factory, dependencyArray) => {\n  return React4.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\nvar isDeeplyEqual = dequal;\nexport { ClerkInstanceContext, ClientContext, OrganizationProvider, SessionContext, UserContext, assertContextExists, createContextAndHook, isDeeplyEqual, useAssertWrappedByClerkProvider, useClerk, useClerkInstanceContext, useClientContext, useDeepEqualMemo, useOrganization, useOrganizationContext, useOrganizationList, useSafeLayoutEffect, useSession, useSessionContext, useSessionList, useUser, useUserContext };","map":{"version":3,"mappings":"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","names":["React","assertContextExists","contextVal","msgOrCtx","Error","displayName","createContextAndHook","options","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","__export","SWRConfig","useSWR","useSWRInfinite","__reExport","default","ClerkInstanceContext","useClerkInstanceContext","UserContext","useUserContext","ClientContext","useClientContext","SessionContext","useSessionContext","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","children","organization","swrConfig","Provider","useAssertWrappedByClerkProvider","displayNameOrFn","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","initialPage","_a","pageSizeRef","pageSize","_b","newObj","key","_c","current","cachingSWROptions","dedupingInterval","focusThrottleInterval","usePagesOrInfinite","fetcher","config","cacheKeys","paginatedPage","setPaginatedPage","enabled","_d","triggerInfinite","_e","infinite","keepPreviousData","_f","pagesCacheKey","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","cacheKeyParams","requestParams","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","fetchPage","numberOrgFn","map","a","flat","count","length","total_count","isFetching","_g","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","invitationsSafeValues","clerk","telemetry","record","eventMethodCalled","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","getMemberships","getInvitations","isLoaded","membership","loaded","getCurrentOrganizationMembership","user","organizationMemberships","activeOrganizationId","find","organizationMembership","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","createOrganization","setActive","useSafeLayoutEffect","window","useLayoutEffect","useEffect","useSession","isSignedIn","useSessionList","isomorphicClerk","client","sessions","useUser","useClerk","prototype","hasOwnProperty","iter","tar","dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","toString","Array","Map","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","call","useDeepEqualMemoize","ref","useDeepEqualMemo","factory","dependencyArray","isDeeplyEqual"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/createContextAndHook.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/contexts.tsx","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/clerk-swr.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/usePagesOrInfinite.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useOrganization.tsx","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useOrganizationList.tsx","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useSafeLayoutEffect.tsx","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useSession.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useSessionList.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useUser.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useClerk.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/node_modules/dequal/dist/index.mjs","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/react/hooks/useDeepEqualMemo.ts"],"sourcesContent":["'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClientResource,\n  LoadedClerk,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: { organization },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\nfunction useAssertWrappedByClerkProvider(displayNameOrFn: string | (() => void)): void {\n  const ctx = React.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === 'function') {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(\n      `${displayNameOrFn} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n    );\n  }\n}\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n  useAssertWrappedByClerkProvider,\n};\n","'use client';\n// eslint-disable-next-line import/export\nexport * from 'swr';\n// eslint-disable-next-line import/export\nexport { default as useSWR, SWRConfig } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type {\n  CacheSetter,\n  PagesOrInfiniteConfig,\n  PagesOrInfiniteOptions,\n  PaginatedResources,\n  ValueOrSetter,\n} from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage,\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\nconst cachingSWROptions = {\n  dedupingInterval: 1000 * 60,\n  focusThrottleInterval: 1000 * 60 * 2,\n} satisfies Parameters<typeof useSWR>[2];\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TConfig extends PagesOrInfiniteConfig = PagesOrInfiniteConfig,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  config: TConfig,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TConfig['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = config.enabled ?? true;\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData, ...cachingSWROptions },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    cachingSWROptions,\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembersParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useSessionContext,\n} from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  domains?: true | PaginatedHookConfig<GetDomainsParams>;\n  membershipRequests?: true | PaginatedHookConfig<GetMembershipRequestParams>;\n  memberships?: true | PaginatedHookConfig<GetMembersParams>;\n  invitations?: true | PaginatedHookConfig<GetInvitationsParams>;\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      organization: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganization');\n\n  const { organization } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganization'));\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    membersParams || {},\n    organization?.getMemberships,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  userMemberships?: true | PaginatedHookConfig<GetUserOrganizationMembershipParams>;\n  userInvitations?: true | PaginatedHookConfig<GetUserOrganizationInvitationsParams>;\n  userSuggestions?: true | PaginatedHookConfig<GetUserOrganizationSuggestionsParams>;\n};\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      createOrganization: undefined;\n      setActive: undefined;\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganizationList');\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganizationList'));\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    userMembershipsParams || {},\n    user?.getOrganizationMemberships,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","import type { ActiveSessionResource } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useSessionContext } from '../contexts';\n\ntype UseSessionReturn =\n  | { isLoaded: false; isSignedIn: undefined; session: undefined }\n  | { isLoaded: true; isSignedIn: false; session: null }\n  | { isLoaded: true; isSignedIn: true; session: ActiveSessionResource };\n\ntype UseSession = () => UseSessionReturn;\n\n/**\n * Returns the current auth state and if a session exists, the session object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `session`.\n *\n * @example\n * A simple example:\n *\n * import { useSession } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>{session.updatedAt}</div>\n * }\n */\nexport const useSession: UseSession = () => {\n  useAssertWrappedByClerkProvider('useSession');\n\n  const session = useSessionContext();\n\n  if (session === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, session: undefined };\n  }\n\n  if (session === null) {\n    return { isLoaded: true, isSignedIn: false, session: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, session };\n};\n","import type { SessionResource, SetActive } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useClientContext } from '../contexts';\n\ntype UseSessionListReturn =\n  | {\n      isLoaded: false;\n      sessions: undefined;\n      setActive: undefined;\n    }\n  | {\n      isLoaded: true;\n      sessions: SessionResource[];\n      setActive: SetActive;\n    };\n\ntype UseSessionList = () => UseSessionListReturn;\n\nexport const useSessionList: UseSessionList = () => {\n  useAssertWrappedByClerkProvider('useSessionList');\n\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n\n  if (!client) {\n    return { isLoaded: false, sessions: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import type { UserResource } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useUserContext } from '../contexts';\n\ntype UseUserReturn =\n  | { isLoaded: false; isSignedIn: undefined; user: undefined }\n  | { isLoaded: true; isSignedIn: false; user: null }\n  | { isLoaded: true; isSignedIn: true; user: UserResource };\n\n/**\n * Returns the current auth state and if a user is signed in, the user object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `user`.\n *\n * @example\n * A simple example:\n *\n * import { useUser } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, user } = useUser();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>Hello, {user.firstName}</div>\n * }\n */\nexport function useUser(): UseUserReturn {\n  useAssertWrappedByClerkProvider('useUser');\n\n  const user = useUserContext();\n\n  if (user === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, user: undefined };\n  }\n\n  if (user === null) {\n    return { isLoaded: true, isSignedIn: false, user: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, user };\n}\n","import type { LoadedClerk } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext } from '../contexts';\n\nexport const useClerk = (): LoadedClerk => {\n  useAssertWrappedByClerkProvider('useClerk');\n  return useClerkInstanceContext();\n};\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { dequal as deepEqual } from 'dequal';\nimport React from 'react';\n\ntype UseMemoFactory<T> = () => T;\ntype UseMemoDependencyArray = Exclude<Parameters<typeof React.useMemo>[1], 'undefined'>;\ntype UseDeepEqualMemo = <T>(factory: UseMemoFactory<T>, dependencyArray: UseMemoDependencyArray) => T;\n\nconst useDeepEqualMemoize = <T>(value: T) => {\n  const ref = React.useRef<T>(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React.useMemo(() => ref.current, [ref.current]);\n};\n\nexport const useDeepEqualMemo: UseDeepEqualMemo = (factory, dependencyArray) => {\n  return React.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\nexport const isDeeplyEqual = deepEqual;\n"]},"metadata":{},"sourceType":"module"}