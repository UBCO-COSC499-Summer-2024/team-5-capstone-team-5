{"ast":null,"code":"// src/file.ts\nfunction readJSONFile(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", function () {\n      const result = JSON.parse(reader.result);\n      resolve(result);\n    });\n    reader.addEventListener(\"error\", reject);\n    reader.readAsText(file);\n  });\n}\n\nvar MimeTypeToExtensionMap = Object.freeze({\n  \"image/png\": \"png\",\n  \"image/jpeg\": \"jpg\",\n  \"image/gif\": \"gif\",\n  \"image/webp\": \"webp\",\n  \"image/x-icon\": \"ico\",\n  \"image/vnd.microsoft.icon\": \"ico\"\n});\n\nvar extension = mimeType => {\n  return MimeTypeToExtensionMap[mimeType];\n};\n\nexport { readJSONFile, extension };","map":{"version":3,"mappings":";AAMO,SAASA,YAAT,CAAsBC,IAAtB,EAAoD;AACzD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,SAAS,IAAIC,UAAJ,EAAf;AACAD,WAAOE,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,YAAMC,SAASC,KAAKC,KAAL,CAAWL,OAAOG,MAAlB,CAAf;AACAL,cAAQK,MAAR;AACD,KAHD;AAKAH,WAAOE,gBAAP,CAAwB,OAAxB,EAAiCH,MAAjC;AACAC,WAAOM,UAAP,CAAkBV,IAAlB;AACD,GATM,CAAP;AAUF;;AAEA,IAAMW,yBAAyBC,OAAOC,MAAP,CAAc;AAC3C,eAAa,KAD8B;AAE3C,gBAAc,KAF6B;AAG3C,eAAa,KAH8B;AAI3C,gBAAc,MAJ6B;AAK3C,kBAAgB,KAL2B;AAM3C,8BAA4B;AANe,CAAd,CAA/B;;AAWO,IAAMC,YAAaC,QAAD,IAAyC;AAChE,SAAOJ,uBAAuBI,QAAvB,CAAP;AACF,CAFO","names":["readJSONFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","JSON","parse","readAsText","MimeTypeToExtensionMap","Object","freeze","extension","mimeType"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/file.ts"],"sourcesContent":["/**\n * Read an expected JSON type File.\n *\n * Probably paired with:\n *  <input type='file' accept='application/JSON' ... />\n */\nexport function readJSONFile(file: File): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      const result = JSON.parse(reader.result as string);\n      resolve(result);\n    });\n\n    reader.addEventListener('error', reject);\n    reader.readAsText(file);\n  });\n}\n\nconst MimeTypeToExtensionMap = Object.freeze({\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/gif': 'gif',\n  'image/webp': 'webp',\n  'image/x-icon': 'ico',\n  'image/vnd.microsoft.icon': 'ico',\n} as const);\n\nexport type SupportedMimeType = keyof typeof MimeTypeToExtensionMap;\n\nexport const extension = (mimeType: SupportedMimeType): string => {\n  return MimeTypeToExtensionMap[mimeType];\n};\n"]},"metadata":{},"sourceType":"module"}