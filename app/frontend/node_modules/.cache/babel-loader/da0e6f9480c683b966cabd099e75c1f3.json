{"ast":null,"code":"// src/devBrowser.ts\nvar DEV_BROWSER_JWT_KEY = \"__clerk_db_jwt\";\nvar DEV_BROWSER_JWT_HEADER = \"Clerk-Db-Jwt\";\n\nfunction setDevBrowserJWTInURL(url, jwt) {\n  const resultURL = new URL(url);\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  const jwtToSet = jwtFromSearch || jwt;\n\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n\n  return resultURL;\n}\n\nfunction extractDevBrowserJWTFromURL(url) {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== \"undefined\") {\n    globalThis.history.replaceState(null, \"\", removeDevBrowserJwt(url));\n  }\n\n  return jwt;\n}\n\nvar readDevBrowserJwtFromSearchParams = url => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || \"\";\n};\n\nvar removeDevBrowserJwt = url => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\n\nvar removeDevBrowserJwtFromURLSearchParams = _url => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\n\nvar removeLegacyDevBrowserJwt = _url => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = \"__dev_session\";\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, \"\");\n\n  if (url.href.endsWith(\"#\")) {\n    url.hash = \"\";\n  }\n\n  return url;\n};\n\nexport { DEV_BROWSER_JWT_KEY, DEV_BROWSER_JWT_HEADER, setDevBrowserJWTInURL, extractDevBrowserJWTFromURL };","map":{"version":3,"mappings":";AAAO,IAAMA,sBAAsB,gBAA5B;AACA,IAAMC,yBAAyB,cAA/B;;AAGA,SAASC,qBAAT,CAA+BC,GAA/B,EAAyCC,GAAzC,EAA2D;AAChE,QAAMC,YAAY,IAAIC,GAAJ,CAAQH,GAAR,CAAlB;AAGA,QAAMI,gBAAgBF,UAAUG,YAAV,CAAuBC,GAAvB,CAA2BT,mBAA3B,CAAtB;AACAK,YAAUG,YAAV,CAAuBE,MAAvB,CAA8BV,mBAA9B;AAGA,QAAMW,WAAWJ,iBAAiBH,GAAlC;;AAEA,MAAIO,QAAJ,EAAc;AACZN,cAAUG,YAAV,CAAuBI,GAAvB,CAA2BZ,mBAA3B,EAAgDW,QAAhD;AACF;;AAEA,SAAON,SAAP;AACF;;AAOO,SAASQ,2BAAT,CAAqCV,GAArC,EAAuD;AAC5D,QAAMC,MAAMU,kCAAkCX,GAAlC,CAAZ;AACA,QAAMY,WAAWC,oBAAoBb,GAApB,CAAjB;;AACA,MAAIY,SAASE,IAAT,KAAkBd,IAAIc,IAAtB,IAA8B,OAAOC,WAAWC,OAAlB,KAA8B,WAAhE,EAA6E;AAC3ED,eAAWC,OAAX,CAAmBC,YAAnB,CAAgC,IAAhC,EAAsC,EAAtC,EAA0CJ,oBAAoBb,GAApB,CAA1C;AACF;;AACA,SAAOC,GAAP;AACF;;AAEA,IAAMU,oCAAqCX,GAAD,IAAc;AACtD,SAAOA,IAAIK,YAAJ,CAAiBC,GAAjB,CAAqBT,mBAArB,KAA6C,EAApD;AACF,CAFA;;AAIA,IAAMgB,sBAAuBb,GAAD,IAAc;AACxC,SAAOkB,uCAAuCC,0BAA0BnB,GAA1B,CAAvC,CAAP;AACF,CAFA;;AAIA,IAAMkB,yCAA0CE,IAAD,IAAe;AAC5D,QAAMpB,MAAM,IAAIG,GAAJ,CAAQiB,IAAR,CAAZ;AACApB,MAAIK,YAAJ,CAAiBE,MAAjB,CAAwBV,mBAAxB;AACA,SAAOG,GAAP;AACF,CAJA;;AAiBA,IAAMmB,4BAA6BC,IAAD,IAAe;AAC/C,QAAMC,gCAAgC,wBAAtC;AACA,QAAMC,6BAA6B,eAAnC;AACA,QAAMtB,MAAM,IAAIG,GAAJ,CAAQiB,IAAR,CAAZ;AACApB,MAAIK,YAAJ,CAAiBE,MAAjB,CAAwBe,0BAAxB;AACAtB,MAAIuB,IAAJ,GAAWC,UAAUxB,IAAIuB,IAAd,EAAoBE,OAApB,CAA4BJ,6BAA5B,EAA2D,EAA3D,CAAX;;AACA,MAAIrB,IAAIc,IAAJ,CAASY,QAAT,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B1B,QAAIuB,IAAJ,GAAW,EAAX;AACF;;AACA,SAAOvB,GAAP;AACF,CAVA","names":["DEV_BROWSER_JWT_KEY","DEV_BROWSER_JWT_HEADER","setDevBrowserJWTInURL","url","jwt","resultURL","URL","jwtFromSearch","searchParams","get","delete","jwtToSet","set","extractDevBrowserJWTFromURL","readDevBrowserJwtFromSearchParams","cleanUrl","removeDevBrowserJwt","href","globalThis","history","replaceState","removeDevBrowserJwtFromURLSearchParams","removeLegacyDevBrowserJwt","_url","DEV_BROWSER_JWT_MARKER_REGEXP","DEV_BROWSER_JWT_LEGACY_KEY","hash","decodeURI","replace","endsWith"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/devBrowser.ts"],"sourcesContent":["export const DEV_BROWSER_JWT_KEY = '__clerk_db_jwt';\nexport const DEV_BROWSER_JWT_HEADER = 'Clerk-Db-Jwt';\n\n// Sets the dev_browser JWT in the hash or the search\nexport function setDevBrowserJWTInURL(url: URL, jwt: string): URL {\n  const resultURL = new URL(url);\n\n  // extract & strip existing jwt from search\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n\n  // Existing jwt takes precedence\n  const jwtToSet = jwtFromSearch || jwt;\n\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n\n  return resultURL;\n}\n\n/**\n * Gets the __clerk_db_jwt JWT from either the hash or the search\n * Side effect:\n * Removes __clerk_db_jwt JWT from the URL (hash and searchParams) and updates the browser history\n */\nexport function extractDevBrowserJWTFromURL(url: URL): string {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== 'undefined') {\n    globalThis.history.replaceState(null, '', removeDevBrowserJwt(url));\n  }\n  return jwt;\n}\n\nconst readDevBrowserJwtFromSearchParams = (url: URL) => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || '';\n};\n\nconst removeDevBrowserJwt = (url: URL) => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\n\nconst removeDevBrowserJwtFromURLSearchParams = (_url: URL) => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\n\n/**\n * Removes the __clerk_db_jwt JWT from the URL hash, as well as\n * the legacy __dev_session JWT from the URL searchParams\n * We no longer need to use this value, however, we should remove it from the URL\n * Existing v4 apps will write the JWT to the hash and the search params in order to ensure\n * backwards compatibility with older v4 apps.\n * The only use case where this is needed now is when a user upgrades to clerk@5 locally\n * without changing the component's version on their dashboard.\n * In this scenario, the AP@4 -> localhost@5 redirect will still have the JWT in the hash,\n * in which case we need to remove it.\n */\nconst removeLegacyDevBrowserJwt = (_url: URL) => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = '__dev_session';\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, '');\n  if (url.href.endsWith('#')) {\n    url.hash = '';\n  }\n  return url;\n};\n"]},"metadata":{},"sourceType":"module"}