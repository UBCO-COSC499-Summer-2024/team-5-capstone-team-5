{"ast":null,"code":"import { isomorphicAtob } from \"./chunk-TETGTEI2.mjs\";\nimport { isomorphicBtoa } from \"./chunk-KOH7GTJO.mjs\";\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from \"./chunk-X2FYR5U6.mjs\"; // src/keys.ts\n\nvar PUBLISHABLE_KEY_LIVE_PREFIX = \"pk_live_\";\nvar PUBLISHABLE_KEY_TEST_PREFIX = \"pk_test_\";\nvar PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nfunction buildPublishableKey(frontendApi) {\n  const isDevKey = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) || frontendApi.startsWith(\"clerk.\") && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nfunction parsePublishableKey(key) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  key = key || \"\";\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal) {\n      throw new Error(\"Publishable key not valid.\");\n    }\n\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? \"production\" : \"development\";\n  let frontendApi = isomorphicAtob(key.split(\"_\")[2]);\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== \"development\" && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi\n  };\n}\n\nfunction isPublishableKey(key) {\n  key = key || \"\";\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split(\"_\")[2] || \"\").endsWith(\"$\");\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\n\nfunction createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = /* @__PURE__ */new Map();\n  return {\n    isDevOrStagingUrl: url => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === \"string\" ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n\n      if (res === void 0) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n\n      return res;\n    }\n  };\n}\n\nfunction isDevelopmentFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"pk_test_\");\n}\n\nfunction isProductionFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"pk_live_\");\n}\n\nfunction isDevelopmentFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\n\nfunction isProductionFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"sk_live_\");\n}\n\nexport { buildPublishableKey, parsePublishableKey, isPublishableKey, createDevOrStagingUrlCache, isDevelopmentFromPublishableKey, isProductionFromPublishableKey, isDevelopmentFromSecretKey, isProductionFromSecretKey };","map":{"version":3,"mappings":"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","names":["PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","PUBLISHABLE_FRONTEND_API_DEV_REGEX","buildPublishableKey","frontendApi","isDevKey","test","startsWith","LEGACY_DEV_INSTANCE_SUFFIXES","some","s","endsWith","keyPrefix","isomorphicBtoa","parsePublishableKey","key","options","isPublishableKey","fatal","Error","instanceType","isomorphicAtob","split","slice","proxyUrl","domain","hasValidPrefix","hasValidFrontendApiPostfix","createDevOrStagingUrlCache","devOrStagingUrlCache","Map","isDevOrStagingUrl","url","hostname","res","get","DEV_OR_STAGING_SUFFIXES","set","isDevelopmentFromPublishableKey","apiKey","isProductionFromPublishableKey","isDevelopmentFromSecretKey","isProductionFromSecretKey"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/keys.ts"],"sourcesContent":["import type { PublishableKey } from '@clerk/types';\n\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isomorphicAtob } from './isomorphicAtob';\nimport { isomorphicBtoa } from './isomorphicBtoa';\n\ntype ParsePublishableKeyOptions = {\n  fatal?: boolean;\n  domain?: string;\n  proxyUrl?: string;\n};\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const isDevKey =\n    PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ||\n    (frontendApi.startsWith('clerk.') && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s)));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: ParsePublishableKeyOptions & { fatal: true },\n): PublishableKey;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options?: ParsePublishableKeyOptions,\n): PublishableKey | null;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: { fatal?: boolean; domain?: string; proxyUrl?: string } = {},\n): PublishableKey | null {\n  key = key || '';\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal) {\n      throw new Error('Publishable key not valid.');\n    }\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  // TODO(@dimkl): validate packages/clerk-js/src/utils/instance.ts\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== 'development' && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\nexport function isPublishableKey(key: string) {\n  key = key || '';\n\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\n\nexport function createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('pk_test_');\n}\n\nexport function isProductionFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('pk_live_');\n}\n\nexport function isDevelopmentFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n"]},"metadata":{},"sourceType":"module"}