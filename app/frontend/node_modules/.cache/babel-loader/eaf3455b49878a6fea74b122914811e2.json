{"ast":null,"code":"// src/error.ts\nfunction isUnauthorizedError(e) {\n  var _a, _b;\n\n  const status = e == null ? void 0 : e.status;\n  const code = (_b = (_a = e == null ? void 0 : e.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code;\n  return code === \"authentication_invalid\" && status === 401;\n}\n\nfunction is4xxError(e) {\n  const status = e == null ? void 0 : e.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nfunction isNetworkError(e) {\n  const message = (`${e.message}${e.name}` || \"\").toLowerCase().replace(/\\s+/g, \"\");\n  return message.includes(\"networkerror\");\n}\n\nfunction isKnownError(error) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nfunction isClerkAPIResponseError(err) {\n  return \"clerkError\" in err;\n}\n\nfunction isClerkRuntimeError(err) {\n  return \"clerkRuntimeError\" in err;\n}\n\nfunction isMetamaskError(err) {\n  return \"code\" in err && [4001, 32602, 32603].includes(err.code) && \"message\" in err;\n}\n\nfunction isUserLockedError(err) {\n  var _a, _b;\n\n  return isClerkAPIResponseError(err) && ((_b = (_a = err.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code) === \"user_locked\";\n}\n\nfunction isPasswordPwnedError(err) {\n  var _a, _b;\n\n  return isClerkAPIResponseError(err) && ((_b = (_a = err.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code) === \"form_password_pwned\";\n}\n\nfunction parseErrors() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nfunction parseError(error) {\n  var _a, _b, _c, _d, _e;\n\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: (_a = error == null ? void 0 : error.meta) == null ? void 0 : _a.param_name,\n      sessionId: (_b = error == null ? void 0 : error.meta) == null ? void 0 : _b.session_id,\n      emailAddresses: (_c = error == null ? void 0 : error.meta) == null ? void 0 : _c.email_addresses,\n      identifiers: (_d = error == null ? void 0 : error.meta) == null ? void 0 : _d.identifiers,\n      zxcvbn: (_e = error == null ? void 0 : error.meta) == null ? void 0 : _e.zxcvbn\n    }\n  };\n}\n\nvar ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {\n  constructor(message, _ref) {\n    let {\n      data,\n      status,\n      clerkTraceId\n    } = _ref;\n    super(message);\n\n    this.toString = () => {\n      let message = `[${this.name}]\nMessage:${this.message}\nStatus:${this.status}\nSerialized errors: ${this.errors.map(e => JSON.stringify(e))}`;\n\n      if (this.clerkTraceId) {\n        message += `\nClerk Trace ID: ${this.clerkTraceId}`;\n      }\n\n      return message;\n    };\n\n    Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n};\nvar ClerkRuntimeError = class _ClerkRuntimeError extends Error {\n  constructor(message, _ref2) {\n    let {\n      code\n    } = _ref2;\n    super(message);\n    /**\n     * Returns a string representation of the error.\n     *\n     * @returns {string} A formatted string with the error name and message.\n     * @memberof ClerkRuntimeError\n     */\n\n    this.toString = () => {\n      return `[${this.name}]\nMessage:${this.message}`;\n    };\n\n    Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);\n    this.code = code;\n    this.message = message;\n    this.clerkRuntimeError = true;\n  }\n\n};\nvar EmailLinkError = class _EmailLinkError extends Error {\n  constructor(code) {\n    super(code);\n    this.code = code;\n    Object.setPrototypeOf(this, _EmailLinkError.prototype);\n  }\n\n};\n\nfunction isEmailLinkError(err) {\n  return err instanceof EmailLinkError;\n}\n\nvar EmailLinkErrorCode = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`\n});\n\nfunction buildErrorThrower(_ref3) {\n  let {\n    packageName,\n    customMessages\n  } = _ref3;\n  let pkg = packageName;\n  const messages = { ...DefaultMessages,\n    ...customMessages\n  };\n\n  function buildMessage(rawMessage, replacements) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || \"\").toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName(_ref4) {\n      let {\n        packageName: packageName2\n      } = _ref4;\n\n      if (typeof packageName2 === \"string\") {\n        pkg = packageName2;\n      }\n\n      return this;\n    },\n\n    setMessages(_ref5) {\n      let {\n        customMessages: customMessages2\n      } = _ref5;\n      Object.assign(messages, customMessages2 || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params) {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params) {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError() {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError() {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params) {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message) {\n      throw new Error(buildMessage(message));\n    }\n\n  };\n}\n\nexport { isUnauthorizedError, is4xxError, isNetworkError, isKnownError, isClerkAPIResponseError, isClerkRuntimeError, isMetamaskError, isUserLockedError, isPasswordPwnedError, parseErrors, parseError, ClerkAPIResponseError, ClerkRuntimeError, EmailLinkError, isEmailLinkError, EmailLinkErrorCode, buildErrorThrower };","map":{"version":3,"mappings":"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","names":["isUnauthorizedError","e","status","code","_b","errors","is4xxError","isNetworkError","message","name","toLowerCase","replace","includes","isKnownError","error","isClerkAPIResponseError","isMetamaskError","isClerkRuntimeError","err","isUserLockedError","isPasswordPwnedError","parseErrors","data","length","map","parseError","longMessage","long_message","meta","paramName","_a","param_name","sessionId","session_id","emailAddresses","_c","email_addresses","identifiers","_d","zxcvbn","_e","ClerkAPIResponseError","_ClerkAPIResponseError","Error","constructor","clerkTraceId","toString","JSON","stringify","Object","setPrototypeOf","prototype","clerkError","ClerkRuntimeError","_ClerkRuntimeError","clerkRuntimeError","EmailLinkError","_EmailLinkError","isEmailLinkError","EmailLinkErrorCode","Expired","Failed","ClientMismatch","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","buildErrorThrower","packageName","customMessages","pkg","messages","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","setPackageName","setMessages","assign","throwInvalidPublishableKeyError","params","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/error.ts"],"sourcesContent":["import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = message;\n    this.clerkRuntimeError = true;\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   * @memberof ClerkRuntimeError\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err instanceof EmailLinkError;\n}\n\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}