{"ast":null,"code":"// src/callWithRetry.ts\nfunction wait(ms) {\n  return new Promise(res => setTimeout(res, ms));\n}\n\nvar MAX_NUMBER_OF_RETRIES = 5;\n\nasync function callWithRetry(fn) {\n  let attempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let maxAttempts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_NUMBER_OF_RETRIES;\n\n  try {\n    return await fn();\n  } catch (e) {\n    if (attempt >= maxAttempts) {\n      throw e;\n    }\n\n    await wait(2 ** attempt * 100);\n    return callWithRetry(fn, attempt + 1, maxAttempts);\n  }\n}\n\nexport { callWithRetry };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,CAAcC,EAAd,EAA0B;AACxB,SAAO,IAAIC,OAAJ,CAAYC,OAAOC,WAAWD,GAAX,EAAgBF,EAAhB,CAAnB,CAAP;AACF;;AAEA,IAAMI,wBAAwB,CAA9B;;AAQA,eAAsBC,aAAtB,CACEC,EADF,EAIc;AAAA,MAFZC,OAEY,uEAFF,CAEE;AAAA,MADZC,WACY,uEADEJ,qBACF;;AACZ,MAAI;AACF,WAAO,MAAME,IAAb;AACF,GAFA,CAEA,OAASG,CAAT,EAAY;AACV,QAAIF,WAAWC,WAAf,EAA4B;AAC1B,YAAMC,CAAN;AACF;;AACA,UAAMV,KAAK,KAAKQ,OAAL,GAAe,GAApB,CAAN;AAEA,WAAOF,cAAcC,EAAd,EAAkBC,UAAU,CAA5B,EAA+BC,WAA/B,CAAP;AACF;AACF","names":["wait","ms","Promise","res","setTimeout","MAX_NUMBER_OF_RETRIES","callWithRetry","fn","attempt","maxAttempts","e"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/callWithRetry.ts"],"sourcesContent":["function wait(ms: number) {\n  return new Promise(res => setTimeout(res, ms));\n}\n\nconst MAX_NUMBER_OF_RETRIES = 5;\n\n/**\n * Retry callback function every few hundred ms (with an exponential backoff\n * based on the current attempt) until the maximum attempts has reached or\n * the callback is executed successfully. The default number of maximum\n * attempts is 5 and retries are triggered when callback throws an error.\n */\nexport async function callWithRetry<T>(\n  fn: (...args: unknown[]) => Promise<T>,\n  attempt = 1,\n  maxAttempts = MAX_NUMBER_OF_RETRIES,\n): Promise<T> {\n  try {\n    return await fn();\n  } catch (e) {\n    if (attempt >= maxAttempts) {\n      throw e;\n    }\n    await wait(2 ** attempt * 100);\n\n    return callWithRetry(fn, attempt + 1, maxAttempts);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}