{"ast":null,"code":"// src/utils/noop.ts\nvar noop = function () {}; // src/workerTimers/workerTimers.worker.ts\n\n\nvar workerTimers_worker_default = 'const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener(\"message\",r=>{const e=r.data;switch(e.type){case\"setTimeout\":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id})},e.ms);break;case\"clearTimeout\":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case\"setInterval\":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case\"clearInterval\":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\\n'; // src/workerTimers/createWorkerTimers.ts\n\nvar createWebWorker = function (source) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof Worker === \"undefined\") {\n    return null;\n  }\n\n  try {\n    const blob = new Blob([source], {\n      type: \"application/javascript; charset=utf-8\"\n    });\n    const workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn(\"Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP\");\n    return null;\n  }\n};\n\nvar fallbackTimers = () => {\n  const setTimeout = globalThis.setTimeout.bind(globalThis);\n  const setInterval = globalThis.setInterval.bind(globalThis);\n  const clearTimeout = globalThis.clearTimeout.bind(globalThis);\n  const clearInterval = globalThis.clearInterval.bind(globalThis);\n  return {\n    setTimeout,\n    setInterval,\n    clearTimeout,\n    clearInterval,\n    cleanup: noop\n  };\n};\n\nvar createWorkerTimers = () => {\n  let id = 0;\n\n  const generateId = () => id++;\n\n  const callbacks = /* @__PURE__ */new Map();\n\n  const post = (w, p) => w == null ? void 0 : w.postMessage(p);\n\n  const handleMessage = e => {\n    var _a;\n\n    (_a = callbacks.get(e.data.id)) == null ? void 0 : _a();\n  };\n\n  let worker = createWebWorker(workerTimers_worker_default, {\n    name: \"clerk-timers\"\n  });\n  worker == null ? void 0 : worker.addEventListener(\"message\", handleMessage);\n\n  if (!worker) {\n    return fallbackTimers();\n  }\n\n  const init = () => {\n    if (!worker) {\n      worker = createWebWorker(workerTimers_worker_default, {\n        name: \"clerk-timers\"\n      });\n      worker == null ? void 0 : worker.addEventListener(\"message\", handleMessage);\n    }\n  };\n\n  const cleanup = () => {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n\n  const setTimeout = (cb, ms) => {\n    init();\n    const id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setTimeout\",\n      id: id2,\n      ms\n    });\n    return id2;\n  };\n\n  const setInterval = (cb, ms) => {\n    init();\n    const id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setInterval\",\n      id: id2,\n      ms\n    });\n    return id2;\n  };\n\n  const clearTimeout = id2 => {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearTimeout\",\n      id: id2\n    });\n  };\n\n  const clearInterval = id2 => {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearInterval\",\n      id: id2\n    });\n  };\n\n  return {\n    setTimeout,\n    setInterval,\n    clearTimeout,\n    clearInterval,\n    cleanup\n  };\n}; // src/poller.ts\n\n\nfunction Poller() {\n  let {\n    delayInMs\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    delayInMs: 1e3\n  };\n  const workerTimers = createWorkerTimers();\n  let timerId;\n  let stopped = false;\n\n  const stop = () => {\n    if (timerId) {\n      workerTimers.clearTimeout(timerId);\n      workerTimers.cleanup();\n    }\n\n    stopped = true;\n  };\n\n  const run = async cb => {\n    stopped = false;\n    await cb(stop);\n\n    if (stopped) {\n      return;\n    }\n\n    timerId = workerTimers.setTimeout(() => {\n      void run(cb);\n    }, delayInMs);\n  };\n\n  return {\n    run,\n    stop\n  };\n}\n\nexport { noop, createWorkerTimers, Poller };","map":{"version":3,"mappings":"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","names":["noop","createWebWorker","source","opts","Worker","blob","Blob","type","workerScript","globalThis","URL","createObjectURL","e","console","warn","fallbackTimers","setTimeout","bind","setInterval","clearTimeout","clearInterval","cleanup","createWorkerTimers","id","generateId","callbacks","Map","post","w","p","postMessage","handleMessage","get","data","worker","workerTimers_worker_default","name","addEventListener","init","terminate","clear","cb","ms","set","delete","Poller","delayInMs","workerTimers","timerId","stopped","stop","run"],"sources":["/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/utils/noop.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/workerTimers/workerTimers.worker.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/workerTimers/createWorkerTimers.ts","/Users/jaybhullar/Desktop/team-5-capstone-team-5/app/frontend/node_modules/@clerk/shared/src/poller.ts"],"sourcesContent":["export const noop = (..._args: any[]): void => {\n  // do nothing.\n};\n","const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener(\"message\",r=>{const e=r.data;switch(e.type){case\"setTimeout\":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id})},e.ms);break;case\"clearTimeout\":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case\"setInterval\":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case\"clearInterval\":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\n","import { noop } from '../utils/noop';\nimport type {\n  WorkerClearTimeout,\n  WorkerSetTimeout,\n  WorkerTimeoutCallback,\n  WorkerTimerEvent,\n  WorkerTimerId,\n  WorkerTimerResponseEvent,\n} from './workerTimers.types';\n// @ts-ignore\nimport pollerWorkerSource from './workerTimers.worker';\n\nconst createWebWorker = (source: string, opts: ConstructorParameters<typeof Worker>[1] = {}): Worker | null => {\n  if (typeof Worker === 'undefined') {\n    return null;\n  }\n\n  try {\n    const blob = new Blob([source], { type: 'application/javascript; charset=utf-8' });\n    const workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn('Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP');\n    return null;\n  }\n};\n\nconst fallbackTimers = () => {\n  const setTimeout = globalThis.setTimeout.bind(globalThis) as WorkerSetTimeout;\n  const setInterval = globalThis.setInterval.bind(globalThis) as WorkerSetTimeout;\n  const clearTimeout = globalThis.clearTimeout.bind(globalThis) as WorkerClearTimeout;\n  const clearInterval = globalThis.clearInterval.bind(globalThis) as WorkerClearTimeout;\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup: noop };\n};\n\nexport const createWorkerTimers = () => {\n  let id = 0;\n  const generateId = () => id++;\n  const callbacks = new Map<WorkerTimerId, WorkerTimeoutCallback>();\n  const post = (w: Worker | null, p: WorkerTimerEvent) => w?.postMessage(p);\n  const handleMessage = (e: MessageEvent<WorkerTimerResponseEvent>) => {\n    callbacks.get(e.data.id)?.();\n  };\n\n  let worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n  worker?.addEventListener('message', handleMessage);\n\n  if (!worker) {\n    return fallbackTimers();\n  }\n\n  const init = () => {\n    if (!worker) {\n      worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n      worker?.addEventListener('message', handleMessage);\n    }\n  };\n\n  const cleanup = () => {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n\n  const setTimeout: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setTimeout', id, ms });\n    return id;\n  };\n\n  const setInterval: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setInterval', id, ms });\n    return id;\n  };\n\n  const clearTimeout: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearTimeout', id });\n  };\n\n  const clearInterval: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearInterval', id });\n  };\n\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup };\n};\n","import { createWorkerTimers } from './workerTimers';\n\nexport type PollerStop = () => void;\nexport type PollerCallback = (stop: PollerStop) => Promise<unknown>;\nexport type PollerRun = (cb: PollerCallback) => Promise<void>;\n\ntype PollerOptions = {\n  delayInMs: number;\n};\n\nexport type Poller = {\n  run: PollerRun;\n  stop: PollerStop;\n};\n\nexport function Poller({ delayInMs }: PollerOptions = { delayInMs: 1000 }): Poller {\n  const workerTimers = createWorkerTimers();\n\n  let timerId: number | undefined;\n  let stopped = false;\n\n  const stop: PollerStop = () => {\n    if (timerId) {\n      workerTimers.clearTimeout(timerId);\n      workerTimers.cleanup();\n    }\n    stopped = true;\n  };\n\n  const run: PollerRun = async cb => {\n    stopped = false;\n    await cb(stop);\n    if (stopped) {\n      return;\n    }\n\n    timerId = workerTimers.setTimeout(() => {\n      void run(cb);\n    }, delayInMs) as any as number;\n  };\n\n  return { run, stop };\n}\n"]},"metadata":{},"sourceType":"module"}